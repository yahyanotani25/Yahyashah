"""
modules/exploit_lib/automatic_cve_fetcher.py

Fetches new exploit scripts from a remote HTTP repo. Downloads any .py files
over HTTP and saves them under modules/exploit_lib/.
"""

import os
import requests
import logging
from pathlib import Path

from bismillah import log_event

logger = logging.getLogger("automatic_cve_fetcher")
REPO_ROOT = Path(__file__).parent.parent.parent.resolve()
EXPLOIT_LIB_URL = None  # passed in by exploit_manager via CONFIG
EXPLOIT_LIB_DIR = REPO_ROOT / "modules" / "exploit_lib"

def fetch_exploits(base_url: str):
    """
    Downloads any .py files listed at base_url (expects an index.json or directory listing).
    For demonstration, assume base_url/index.json returns array of filenames.
    """
    global EXPLOIT_LIB_URL
    EXPLOIT_LIB_URL = base_url.rstrip("/") + "/"
    try:
        idx_resp = requests.get(EXPLOIT_LIB_URL + "index.json", timeout=10)
        idx = idx_resp.json()
        downloaded = []
        for fname in idx:
            if not fname.endswith(".py"):
                continue
            url = EXPLOIT_LIB_URL + fname
            r = requests.get(url, timeout=10)
            if r.status_code == 200:
                path = EXPLOIT_LIB_DIR / fname
                path.write_bytes(r.content)
                downloaded.append(fname)
        log_event("automatic_cve_fetcher", f"Downloaded: {downloaded}".encode())
        return {"status": "ok", "downloaded": downloaded}
    except Exception as e:
        return {"status": "error", "detail": str(e)}
